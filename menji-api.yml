openapi: 3.0.0
info:
  version: 1.0.0
  title: Menji API
  description: OpenAPI for Menji API

servers:
  - url: https://menji-api.herokuapp.com
  - url: http://localhost:3000
  - url: https://menji.ca
  - url: https://api.menji.ca

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Bad request
              error:
                type: string
                default: Invalid request

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Resource not found
              error:
                type: string
                default: Not Found

    Unauthorized:
      description: Not Allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: action not allowed
              error:
                type: string
                default: Unauthorized

  schemas:
    User:
      type: object
      required:
        - email
        - phone
        - password
      properties:
        id:
          type: string
          format: uuid
        full_name:
          type: string
          format: name
        email:
          type: string
          format: email
        phone:
          type: string
          format: tel
        password:
          type: string
          format: password

    Point:
      type: object
      properties:
        coordinate:
          type: array
          items:
            type: integer
          # geo coordinate for Impresanera
          default:
            - 4.824553
            - 6.98759
        type:
          type: string
          default: Point

    Ride:
      type: object
      required:
        - payment_method
        - start_location
        - end_location
        - status
      properties:
        start_location:
          $ref: "#/components/schemas/Point"
        end_location:
          $ref: "#/components/schemas/Point"
        cost:
          type: integer
          minimum: 0
        discount:
          type: integer
          minimum: 0
        total_amount:
          type: integer
          minimum: 0
        payment_method:
          type: string
          enum: [card, cash]
          default: cash
        status:
          type: string
          enum: [searching, matched, waiting, started, cancelled, arrived]
        duration:
          type: string
          default: 14min 30sec
        distance:
          type: string
          default: 17km
        driver_location:
          $ref: "#/components/schemas/Point"
        passenger:
          type: string
          format: uuid

    Card:
      type: object
      required:
        - card_type
        - card_number
        - secret_number
        - expiry
      properties:
        card_type:
          type: string
          enum: [visa, verve, master card]
        card_number:
          type: integer
          minimum: 1000000000000000
          maximum: 9999999999999999
        secret_number:
          type: integer
          minimum: 100
          maximum: 999
        expiry:
          type: string
          format: date-time
        owner:
          type: string
          format: uuid

    Review:
      type: object
      required:
        - rating
        - reviewed_user
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        reviewed_user:
          type: string
          format: uuid
        comment:
          type: string

    Report:
      type: object
      required:
        - title
        - reporter
      properties:
        title:
          type: integer
          minimum: 1
          maximum: 5
        reporter:
          type: string
          format: uuid
        comment:
          type: string
        type:
          type: string
        reporteds_user:
          type: string
          format: uuid

    Vehicle:
      type: object
      required:
        - manufacturer
        - model_name
        - vehicle_number
        - plate_number
        - engine_number
        - chassis_number
        - color
        - model_year
      properties:
        manufacturer:
          type: string
        model_name:
          type: string
        vehicle_number:
          type: string
        plate_number:
          type: string
        engine_number:
          type: string
        chassis_number:
          type: string
        color:
          type: string
        model_year:
          type: string
        owner:
          type: string
          format: uuid
        status:
          type: string
          enum: [approved, rejected, under-review]
          default: under-review
        active:
          type: boolean

    Complaint:
      type: object
      required:
        - complainer
        - message
      properties:
        status:
          type: string
          enum: ["open", "closed", "resolved"]
          default: open
        complainer:
          type: string
          format: uuid
        message:
          type: string

    Role:
      type: object
      properties:
        name:
          type: string
          enum:
            - customer
            - driver
            - super-admin
            - inspection-officer
            - customer-support

paths:
  /v1/users:
    get:
      description: Returns a list of all users
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived users
          content:
            application/json:
              schema:
                type: array
                minItems: 3
                maxItems: 10
                items:
                  $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"

    post:
      description: Create a new user
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                phone:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: "Successfully created a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"

  /v1/users/{id}:
    get:
      description: Returns a single user
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "Successfully retrived a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"

    put:
      description: Update a user
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Successfully updated a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"

    delete:
      description: soft delete a user
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "Successfully removed a user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"

  /v1/users/loc:
    get:
      description: Returns list of users by proximity
      tags:
        - Users
      parameters:
        - in: query
          name: long
          schema:
            type: integer
          description: longitudinal coordinate
        - in: query
          name: lat
          schema:
            type: integer
          description: latitudinal coordinate
        - in: query
          name: dist
          schema:
            type: integer
          description: max distance in meters(must be a natural number)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully list closest /v1/users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /v1/users/{userId}/cards:
    get:
      description: Retrive all user cards
      tags:
        - Cards
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived cards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"

    post:
      description: Create a single user cards
      tags:
        - Cards
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                card_type: visa
                card_number: 1234567890123456
                secret_number: 345
                expiry: "2021-10-28T14:35:52.235Z"
      responses:
        "200":
          description: Successfully deleted cards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
                # example:
                #   card_type: visa
                #   card_number: 1234567890123456
                #   secret_number: 345
                #   expiry: "2021-10-28T14:35:52.235Z"

  /v1/users/{userId}/cards/{cardId}:
    get:
      description: Retrive a single user cards
      tags:
        - Cards
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived cards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"

    delete:
      description: Delete a single user cards
      tags:
        - Cards
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cardId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully deleted cards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"

  /v1/rides:
    get:
      description: Returns a list of rides
      tags:
        - Rides
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived users
          content:
            application/json:
              schema:
                type: array
                minItems: 3
                maxItems: 10
                items:
                  $ref: "#/components/schemas/Ride"

    post:
      description: Create a ride
      tags:
        - Rides
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_location:
                  type: number
                end_location:
                  type: number
                payment_method:
                  type: string
      responses:
        "200":
          description: Successfully created a ride
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ride"

  /v1/rides/{id}:
    get:
      description: Returns a specific ride
      tags:
        - Rides
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrive a route
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ride"

    put:
      description: Update a ride
      tags:
        - Rides
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                payment_method: cash
                start_location:
                  long: 4132423423
                  lat: 23423423
                end_location:
                  long: 6432563
                  lat: 5657656
                status: arrived
                cost: 90210032
                discount: 24120626
                total_amount: 94918192
                duration: 1634230512958
      responses:
        "200":
          description: Successfully created a ride
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ride"

    delete:
      description: soft delete a ride
      tags:
        - Rides
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully created a ride
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ride"

  /v1/rides/{rideId}/complaints:
    post:
      description: generate a ride related complaint
      tags:
        - Rides
      parameters:
        - name: rideId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        "200":
          description: Successfully generated a ride complaint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complaint"

    get:
      description: retrive ride complaints
      tags:
        - Rides
      parameters:
        - name: rideId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrive ride complaints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Complaint"

  /v1/rides/{rideId}/complaints/{complaintsId}:
    get:
      description: retrive a specific ride complaints
      tags:
        - Rides
      parameters:
        - name: rideId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: complaintsId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived a specific ride complaint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complaint"
    delete:
      description: remove a specific ride complaints
      tags:
        - Rides
      parameters:
        - name: rideId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: complaintsId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully removed a specific ride complaint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complaint"

  /v1/payment/cards:
    get:
      description: list all registered cards
      tags:
        - Payments
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived cards
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  result:
                    type: array
                    minItems: 3
                    maxItems: 10
                    items:
                      $ref: "#/components/schemas/Card"

    post:
      description: Register a payment card
      tags:
        - Payments
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                card_type:
                  type: string
                  example: "Visa"
                card_number:
                  type: number
                  example: 8412294293483293
                secret_number:
                  type: number
                  example: 754
                expiry:
                  type: number
                  example: 0525
      responses:
        "201":
          description: Successfully added card
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/Card"

  /v1/payment/cards/{id}:
    get:
      description: get a registered cards
      tags:
        - Payments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived card
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/Card"

    delete:
      description: delete a card
      tags:
        - Payments
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully deleted a card
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"

  /v1/auth/sign-up:
    post:
      description: register user similar to user post
      tags:
        - Authentication & Verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                phone:
                  type: string
                password:
                  type: string
              example:
                email: email@mail.com
                password: password
                phone: 0123456789
      responses:
        "201":
          description: "Successfully registered a user a user"
          content:
            application/json:
              schema:
                type: object
                # $ref: '#/components/schemas/User'
                example:
                  token: afdkfnkdsbiwebfasdj.sdfadssfadf.sdfadsfadf
                  full_name: Clementine Nathan
                  email: Nathan@yesenia.net
                  phone: 1-463-123-4447
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"

  /v1/auth/sign-in:
    post:
      description: login authentication
      tags:
        - Authentication & Verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: email@mail.com
                password: password
                phone: 0123456789
      responses:
        "200":
          description: authenticate user
          content:
            application/json:
              schema:
                type: object
                example:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

  /v1/auth/forgot-password:
    put:
      description: Request password reset
      tags:
        - Authentication & Verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: email@mail.com
      responses:
        "200":
          description: Successfully requested password reset
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  message: Password reset code has been sent to the email address

  /v1/auth/reset-password:
    put:
      description: Reset user password
      tags:
        - Authentication & Verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                password: password1
                token: 123456
      responses:
        "200":
          description: Successfully reset user password
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  message: Password reset successfull

  /v1/auth/send-email-verification:
    post:
      description: Send OTP for email verification
      tags:
        - Authentication & Verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: email@mail.com
      responses:
        "200":
          description: Successfully sent OTP
          content:
            application/json:
              schema:
                type: object

  /v1/auth/verify-email:
    post:
      description: Verify email address with OTP
      tags:
        - Authentication & Verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: 34544
                email: email@mail.com
      responses:
        "200":
          description: Successfully verified email
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  error: null

  /v1/auth/send-phone-verification:
    post:
      description: Send OTP for phone verification
      tags:
        - Authentication & Verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                phone: +2341234567890
      responses:
        "200":
          description: Successfully sent OTP
          content:
            application/json:
              schema:
                type: object

  /v1/auth/verify-phone:
    post:
      description: Verify phone number with OTP
      tags:
        - Authentication & Verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: integer
                  minLength: 5
                  maxLength: 5
              example:
                token: 41323
      responses:
        "200":
          description: Successfully phone email
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                example:
                  success: true
                  error: null

  /v1/reviews:
    post:
      description: Create a new review for a user
      tags:
        - Reviews
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"

      responses:
        "201":
          description: Successfully created a review
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"

  /v1/reviews/user/{userId}:
    get:
      description: Retrive all reviews for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Reviews
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"

  /v1/reviews/{reviewId}:
    get:
      description: Retrive a single review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Reviews
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived a review
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"

    delete:
      description: Delete a single review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Reviews
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully deleted review
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"

  /v1/reviews/user/{id}/rating:
    get:
      description: Retrive all reviews for a user with avarage user
      tags:
        - Reviews
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrived reviews
          content:
            application/json:
              schema:
                type: object
                example:
                  rating: 3.4
                  reviews:
                    $ref: "#/components/schemas/Review"

  /v1/vehicles:
    post:
      description: Register a new vehicle
      tags:
        - Vehicles
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                manufacturer:
                  type: string
                model_name:
                  type: string
                vehicle_number:
                  type: string
                plate_number:
                  type: string
                engine_number:
                  type: string
                chassis_number:
                  type: string
                color:
                  type: string
                model_year:
                  type: string
      responses:
        "201":
          description: Successfully registered a vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"

    get:
      description: Retrive all vehicles
      tags:
        - Vehicles
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived all vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"

  /v1/vehicles/{id}:
    get:
      description: Retrive a single vehicles
      tags:
        - Vehicles
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrived all vehicles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"

    put:
      description: Modify vehicle infomation
      tags:
        - Vehicles
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Successfully modefied vehicle infomation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"

    delete:
      description: Delete a vehicles
      tags:
        - Vehicles
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully deleted a vehicle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"

  /v1/vehicles/user/{userId}:
    get:
      description: Retrive all vehicles belonging to a user
      tags:
        - Vehicles
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrived a user's vehicles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"

  /v1/reports:
    post:
      description: Create a report
      tags:
        - Reports
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        "201":
          description: Successfully submitted a report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"

    get:
      description: Retrive all report
      tags:
        - Reports
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrived reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"

  /v1/reports/{id}:
    get:
      description: Retrive a report
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: Successfully submitted a report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"

    put:
      description: Update a report
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: Successfully submitted a report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"

    delete:
      description: Delete a report
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: Successfully submitted a report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
